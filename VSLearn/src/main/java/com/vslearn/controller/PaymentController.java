package com.vslearn.controller;

import com.vslearn.dto.request.VietQRRequest;
import com.vslearn.dto.response.VietQRResponse;
import com.vslearn.service.VietQRService;
import com.vslearn.service.CassoService;
import com.vslearn.utils.MailUtils;
import com.vslearn.utils.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/v1/payment")
@CrossOrigin(origins = {"http://localhost:3000", "http://127.0.0.1:3000"}, allowCredentials = "true")
public class PaymentController {
    
    private final VietQRService vietQRService;
    private final CassoService cassoService;
    private final com.vslearn.repository.TransactionRepository transactionRepository;
    private final MailUtils mailUtils;
    private final JwtUtil jwtUtil;
    
    @Autowired
    public PaymentController(VietQRService vietQRService, CassoService cassoService, 
                           com.vslearn.repository.TransactionRepository transactionRepository,
                           MailUtils mailUtils, JwtUtil jwtUtil) {
        this.vietQRService = vietQRService;
        this.cassoService = cassoService;
        this.transactionRepository = transactionRepository;
        this.mailUtils = mailUtils;
        this.jwtUtil = jwtUtil;
    }
    
    /**
     * Test endpoint ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
     */
    @GetMapping("/test")
    public ResponseEntity<Map<String, Object>> testConnection() {
        return ResponseEntity.ok(Map.of(
            "success", true,
            "message", "Payment API is working"
        ));
    }

    /**
     * Test email service
     */
    @GetMapping("/test/email")
    public ResponseEntity<Map<String, Object>> testEmailService() {
        try {
            boolean emailTest = mailUtils.sentEmail(
                "test@example.com",
                "Test Email Service",
                "<h1>Test Email</h1><p>Email service is working!</p>"
            );
            return ResponseEntity.ok(Map.of(
                "success", emailTest,
                "message", emailTest ? "Email service is working" : "Email service test failed"
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "Email service error: " + e.getMessage()
            ));
        }
    }

    /**
     * Test send payment confirmation email
     */
    @PostMapping("/test/email/payment-confirmation")
    public ResponseEntity<Map<String, Object>> testPaymentConfirmationEmail(@RequestParam String userEmail) {
        try {
            String testEmailContent = generateTestPaymentConfirmationEmail();
            boolean emailSent = mailUtils.sentEmail(
                userEmail,
                "üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ m·ªü kh√≥a th√†nh c√¥ng g√≥i h·ªçc VSLearn",
                testEmailContent
            );
            
            return ResponseEntity.ok(Map.of(
                "success", emailSent,
                "message", emailSent ? "Payment confirmation email sent successfully to: " + userEmail : "Failed to send email"
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "Error sending test email: " + e.getMessage()
            ));
        }
    }
    
    /**
     * Test email configuration
     */
    @GetMapping("/test/email/config")
    public ResponseEntity<Map<String, Object>> testEmailConfig() {
        try {
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Email configuration test",
                "emailConfigured", true,
                "springMailEnabled", true
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "Email configuration error: " + e.getMessage()
            ));
        }
    }
    
    /**
     * T·∫°o VietQR code cho giao d·ªãch
     */
    @PostMapping("/vietqr/create")
    public ResponseEntity<Map<String, Object>> createVietQR(@RequestBody VietQRRequest request) {
        try {
            VietQRResponse response = vietQRService.createVietQR(request);
            
            if ("ERROR".equals(response.getStatus())) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", response.getMessage()
                ));
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "T·∫°o QR code th√†nh c√¥ng",
                "data", response
            ));
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "C√≥ l·ªói x·∫£y ra: " + e.getMessage()
            ));
        }
    }
    
    /**
     * Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
     */
    @GetMapping("/status/{transactionCode}")
    public ResponseEntity<Map<String, Object>> checkPaymentStatus(@PathVariable String transactionCode) {
        try {
            System.out.println("üîç VietQR status check called for: " + transactionCode);
            
            boolean isPaid = vietQRService.checkPaymentStatus(transactionCode);
            
            System.out.println("üîç VietQR status check result: " + isPaid);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "isPaid", isPaid,
                "message", isPaid ? "ƒê√£ thanh to√°n" : "Ch∆∞a thanh to√°n"
            ));
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "C√≥ l·ªói x·∫£y ra: " + e.getMessage()
            ));
        }
    }
    
    /**
     * Webhook t·ª´ VietQR
     */
    @PostMapping("/webhook/vietqr")
    public ResponseEntity<Map<String, Object>> handleVietQRWebhook(@RequestBody String webhookData) {
        try {
            vietQRService.handleWebhook(webhookData);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Webhook processed successfully"
            ));
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "Webhook processing failed: " + e.getMessage()
            ));
        }
    }
    
    /**
     * Test Casso API - l·∫•y danh s√°ch giao d·ªãch
     */
    @GetMapping("/casso/transactions")
    public ResponseEntity<Map<String, Object>> getCassoTransactions(
            @RequestParam(defaultValue = "7") int days) {
        try {
            var fromDate = java.time.LocalDate.now().minusDays(days);
            var toDate = java.time.LocalDate.now();
            
            var transactions = cassoService.getTransactions(fromDate, toDate);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "L·∫•y giao d·ªãch th√†nh c√¥ng",
                "data", Map.of(
                    "transactions", transactions,
                    "fromDate", fromDate.toString(),
                    "toDate", toDate.toString(),
                    "count", transactions.size()
                )
            ));
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "C√≥ l·ªói x·∫£y ra: " + e.getMessage()
            ));
        }
    }
    
    /**
     * Test Casso API - ki·ªÉm tra thanh to√°n
     */
    @GetMapping("/casso/check/{transactionCode}")
    public ResponseEntity<Map<String, Object>> checkCassoPayment(
            @PathVariable String transactionCode,
            @RequestParam(defaultValue = "299000") double amount) {
        try {
            System.out.println("üîç Casso check called for: " + transactionCode + ", amount: " + amount);
            
            boolean isPaid = cassoService.checkPaymentStatus(transactionCode, amount);
            
            System.out.println("üîç Casso check result: " + isPaid);
            
            // N·∫øu payment confirmed, update transaction status
            if (isPaid) {
                try {
                    transactionRepository.updatePaymentStatus(transactionCode, com.vslearn.entities.Transaction.PaymentStatus.PAID);
                    System.out.println("‚úÖ Transaction status updated to PAID for: " + transactionCode);
                } catch (Exception updateError) {
                    System.out.println("‚ùå Error updating transaction status: " + updateError.getMessage());
                }
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "isPaid", isPaid,
                "message", isPaid ? "ƒê√£ thanh to√°n" : "Ch∆∞a thanh to√°n",
                "data", Map.of(
                    "transactionCode", transactionCode,
                    "expectedAmount", amount
                )
            ));
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "C√≥ l·ªói x·∫£y ra: " + e.getMessage()
            ));
        }
    }
    
    /**
     * L·∫•y danh s√°ch t√†i kho·∫£n ng√¢n h√†ng t·ª´ Casso
     */
    @GetMapping("/casso/accounts")
    public ResponseEntity<Map<String, Object>> getCassoAccounts() {
        try {
            var accounts = cassoService.getAccounts();
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "L·∫•y danh s√°ch t√†i kho·∫£n th√†nh c√¥ng",
                "data", Map.of(
                    "accounts", accounts,
                    "count", accounts.size()
                )
            ));
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "C√≥ l·ªói x·∫£y ra: " + e.getMessage()
            ));
        }
    }

    /**
     * Test k·∫øt n·ªëi Casso API
     */
    @GetMapping("/casso/test")
    public ResponseEntity<Map<String, Object>> testCassoConnection() {
        try {
            // Test v·ªõi ng√†y h√¥m nay
            var today = java.time.LocalDate.now();
            var transactions = cassoService.getTransactions(today, today);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Casso API connection successful",
                "data", Map.of(
                    "transactionCount", transactions.size(),
                    "testDate", today.toString(),
                    "apiKey", cassoService.getClass().getSimpleName() // Ch·ªâ hi·ªÉn th·ªã t√™n class, kh√¥ng hi·ªÉn th·ªã key
                )
            ));
            
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "Casso API connection failed: " + e.getMessage()
            ));
        }
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i transaction hi·ªán t·∫°i
     */
    @GetMapping("/transaction/status/{transactionCode}")
    public ResponseEntity<Map<String, Object>> checkTransactionStatus(
            @PathVariable String transactionCode,
            @RequestParam(defaultValue = "299000") double amount) {
        try {
            System.out.println("üîç Checking transaction status for: " + transactionCode + ", amount: " + amount);
            
            // T√¨m transaction trong database
            var transactionOpt = transactionRepository.findByCode(transactionCode);
            if (transactionOpt.isPresent()) {
                var transaction = transactionOpt.get();
                
                System.out.println("üîç Transaction found: " + transaction.getCode() + 
                                 ", Status: " + transaction.getPaymentStatus() + 
                                 ", Amount: " + transaction.getAmount());
                
                // N·∫øu ƒë√£ PAID th√¨ return lu√¥n
                if (transaction.getPaymentStatus() == com.vslearn.entities.Transaction.PaymentStatus.PAID) {
                    System.out.println("‚úÖ Transaction already PAID in database");
                    return ResponseEntity.ok(Map.of(
                        "success", true,
                        "transactionCode", transactionCode,
                        "paymentStatus", transaction.getPaymentStatus().toString(),
                        "amount", transaction.getAmount(),
                        "description", transaction.getDescription(),
                        "startDate", transaction.getStartDate(),
                        "endDate", transaction.getEndDate(),
                        "isPaid", true
                    ));
                }
                
                // N·∫øu ch∆∞a PAID, ki·ªÉm tra qua Casso API
                System.out.println("üîç Transaction is PENDING, checking Casso API...");
                boolean isPaid = cassoService.checkPaymentStatus(transactionCode, amount);
                System.out.println("üîç Casso API result: " + isPaid);
                
                // N·∫øu thanh to√°n th√†nh c√¥ng, c·∫≠p nh·∫≠t database v√† g·ª≠i email
                if (isPaid) {
                    try {
                        System.out.println("‚úÖ Payment confirmed by Casso API, updating database...");
                        transactionRepository.updatePaymentStatus(transactionCode, com.vslearn.entities.Transaction.PaymentStatus.PAID);
                        System.out.println("‚úÖ Transaction status updated to PAID");
                        
                        // Refresh transaction data
                        transaction = transactionRepository.findByCode(transactionCode).orElse(transaction);
                        
                        // G·ª≠i email x√°c nh·∫≠n thanh to√°n
                        try {
                            System.out.println("üìß Sending payment confirmation email...");
                            String emailContent = generatePaymentConfirmationEmail(transaction);
                            boolean emailSent = mailUtils.sentEmail(
                                transaction.getCreatedBy().getEmail(),
                                "üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ m·ªü kh√≥a th√†nh c√¥ng g√≥i h·ªçc VSLearn",
                                emailContent
                            );
                            if (emailSent) {
                                System.out.println("‚úÖ Payment confirmation email sent successfully");
                            } else {
                                System.out.println("‚ùå Failed to send payment confirmation email");
                            }
                        } catch (Exception emailError) {
                            System.out.println("‚ùå Error sending payment confirmation email: " + emailError.getMessage());
                        }
                        
                    } catch (Exception updateError) {
                        System.out.println("‚ùå Error updating transaction status: " + updateError.getMessage());
                    }
                } else {
                    System.out.println("‚ùå Payment not confirmed by Casso API");
                }
                
                return ResponseEntity.ok(Map.of(
                    "success", true,
                    "transactionCode", transactionCode,
                    "paymentStatus", transaction.getPaymentStatus().toString(),
                    "amount", transaction.getAmount(),
                    "description", transaction.getDescription(),
                    "startDate", transaction.getStartDate(),
                    "endDate", transaction.getEndDate(),
                    "isPaid", transaction.getPaymentStatus() == com.vslearn.entities.Transaction.PaymentStatus.PAID
                ));
            } else {
                System.out.println("‚ùå Transaction not found: " + transactionCode);
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "Transaction not found",
                    "transactionCode", transactionCode
                ));
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå Error checking transaction status: " + e.getMessage());
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "C√≥ l·ªói x·∫£y ra: " + e.getMessage()
            ));
        }
    }

    /**
     * Debug endpoint ƒë·ªÉ ki·ªÉm tra thanh to√°n v·ªõi log chi ti·∫øt
     */
    @GetMapping("/debug/check/{transactionCode}")
    public ResponseEntity<Map<String, Object>> debugCheckPayment(
            @PathVariable String transactionCode,
            @RequestParam(defaultValue = "299000") double amount) {
        try {
            System.out.println("üîç DEBUG: Checking payment for transaction: " + transactionCode + ", amount: " + amount);
            
            // 1. Ki·ªÉm tra transaction trong database
            var transactionOpt = transactionRepository.findByCode(transactionCode);
            if (transactionOpt.isPresent()) {
                var transaction = transactionOpt.get();
                System.out.println("üîç DEBUG: Found transaction in DB:");
                System.out.println("  - Code: " + transaction.getCode());
                System.out.println("  - Status: " + transaction.getPaymentStatus());
                System.out.println("  - Amount: " + transaction.getAmount());
                System.out.println("  - Description: " + transaction.getDescription());
                System.out.println("  - Created: " + transaction.getCreatedAt());
            } else {
                System.out.println("‚ùå DEBUG: Transaction not found in DB: " + transactionCode);
            }
            
            // 2. Ki·ªÉm tra qua Casso API
            System.out.println("üîç DEBUG: Checking Casso API...");
            boolean isPaid = cassoService.checkPaymentStatus(transactionCode, amount);
            System.out.println("üîç DEBUG: Casso API result: " + isPaid);
            
            // 3. N·∫øu thanh to√°n th√†nh c√¥ng, c·∫≠p nh·∫≠t database
            if (isPaid) {
                try {
                    System.out.println("üîç DEBUG: Updating transaction status to PAID...");
                    System.out.println("üîç DEBUG: Transaction code: " + transactionCode);
                    System.out.println("üîç DEBUG: Expected amount: " + amount);
                    transactionRepository.updatePaymentStatus(transactionCode, com.vslearn.entities.Transaction.PaymentStatus.PAID);
                    System.out.println("‚úÖ DEBUG: Transaction status updated successfully");
                } catch (Exception updateError) {
                    System.out.println("‚ùå DEBUG: Error updating transaction status: " + updateError.getMessage());
                    updateError.printStackTrace();
                }
            } else {
                System.out.println("‚ùå DEBUG: Payment not confirmed - transaction remains PENDING");
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "isPaid", isPaid,
                "message", isPaid ? "ƒê√£ thanh to√°n" : "Ch∆∞a thanh to√°n",
                "debug", Map.of(
                    "transactionCode", transactionCode,
                    "expectedAmount", amount,
                    "transactionFound", transactionOpt.isPresent(),
                    "transactionStatus", transactionOpt.map(t -> t.getPaymentStatus().toString()).orElse("NOT_FOUND"),
                    "cassoResult", isPaid
                )
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå DEBUG: Error in debug check: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "C√≥ l·ªói x·∫£y ra: " + e.getMessage(),
                "debug", Map.of(
                    "error", e.getMessage(),
                    "stackTrace", e.getStackTrace()
                )
            ));
        }
    }

    /**
     * Xem t·∫•t c·∫£ giao d·ªãch trong 7 ng√†y g·∫ßn nh·∫•t t·ª´ Casso API
     */
    @GetMapping("/casso/transactions/today")
    public ResponseEntity<Map<String, Object>> getTodayTransactions() {
        try {
            System.out.println("üîç Getting recent transactions from Casso API...");
            
            var today = java.time.LocalDate.now();
            var fromDate = today.minusDays(7); // L·∫•y giao d·ªãch trong 7 ng√†y g·∫ßn nh·∫•t
            var transactions = cassoService.getTransactions(fromDate, today);
            
            System.out.println("üîç Found " + transactions.size() + " transactions in last 7 days");
            
            // Log chi ti·∫øt t·ª´ng giao d·ªãch
            for (var transaction : transactions) {
                System.out.println("üîç Transaction: ID=" + transaction.getId() + 
                                 ", Amount=" + transaction.getAmount() + 
                                 ", Description='" + transaction.getDescription() + "'" +
                                 ", When=" + transaction.getWhen());
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "L·∫•y danh s√°ch giao d·ªãch g·∫ßn ƒë√¢y th√†nh c√¥ng",
                "data", Map.of(
                    "transactionCount", transactions.size(),
                    "fromDate", fromDate.toString(),
                    "toDate", today.toString(),
                    "transactions", transactions.stream().map(t -> Map.of(
                        "id", t.getId(),
                        "amount", t.getAmount(),
                        "description", t.getDescription(),
                        "when", t.getWhen()
                    )).collect(java.util.stream.Collectors.toList())
                )
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå Error getting recent transactions: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "C√≥ l·ªói x·∫£y ra: " + e.getMessage()
            ));
        }
    }

    /**
     * Ki·ªÉm tra t·∫•t c·∫£ transactions c·ªßa user hi·ªán t·∫°i
     */
    @GetMapping("/user/transactions")
    public ResponseEntity<Map<String, Object>> getUserTransactions(
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        try {
            System.out.println("üîç Getting all transactions for current user...");
            
            // L·∫•y user ID t·ª´ JWT token
            Long userId = null;
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String token = authHeader.replace("Bearer ", "");
                try {
                    String userIdStr = jwtUtil.getClaimsFromToken(token).getClaims().get("id").toString();
                    userId = Long.parseLong(userIdStr);
                    System.out.println("‚úÖ Found user ID from JWT: " + userId);
                } catch (Exception e) {
                    System.out.println("‚ùå Error getting user ID from JWT: " + e.getMessage());
                }
            }
            
            if (userId == null) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "Kh√¥ng t√¨m th·∫•y user ID"
                ));
            }
            
            // L·∫•y t·∫•t c·∫£ transactions c·ªßa user
            var userTransactions = transactionRepository.findByCreatedBy_Id(userId);
            
            System.out.println("üîç Found " + userTransactions.size() + " transactions for user " + userId);
            
            // Log chi ti·∫øt t·ª´ng transaction
            for (var transaction : userTransactions) {
                System.out.println("üîç Transaction: ID=" + transaction.getId() + 
                                 ", Code=" + transaction.getCode() + 
                                 ", Status=" + transaction.getPaymentStatus() + 
                                 ", Amount=" + transaction.getAmount() + 
                                 ", StartDate=" + transaction.getStartDate() + 
                                 ", EndDate=" + transaction.getEndDate());
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "L·∫•y danh s√°ch transactions th√†nh c√¥ng",
                "data", Map.of(
                    "userId", userId,
                    "transactionCount", userTransactions.size(),
                    "transactions", userTransactions.stream().map(t -> Map.of(
                        "id", t.getId(),
                        "code", t.getCode(),
                        "status", t.getPaymentStatus().toString(),
                        "amount", t.getAmount(),
                        "startDate", t.getStartDate(),
                        "endDate", t.getEndDate(),
                        "createdAt", t.getCreatedAt()
                    )).collect(java.util.stream.Collectors.toList())
                )
            ));
            
        } catch (Exception e) {
            System.err.println("‚ùå Error getting user transactions: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body(Map.of(
                "success", false,
                "message", "C√≥ l·ªói x·∫£y ra: " + e.getMessage()
            ));
        }
    }

    /**
     * Generate payment confirmation email content
     */
    private String generatePaymentConfirmationEmail(com.vslearn.entities.Transaction transaction) {
        return String.format("""
            <!DOCTYPE html>
            <html lang="vi">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>X√°c nh·∫≠n thanh to√°n VSLearn</title>
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .header { background: linear-gradient(135deg, #667eea 0%%, #764ba2 100%%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
                    .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
                    .success-icon { font-size: 48px; margin-bottom: 20px; }
                    .package-info { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #667eea; }
                    .feature-list { list-style: none; padding: 0; }
                    .feature-list li { padding: 8px 0; border-bottom: 1px solid #eee; }
                    .feature-list li:before { content: "‚úÖ "; margin-right: 10px; }
                    .cta-button { display: inline-block; background: #667eea; color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; margin: 20px 0; }
                    .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; }
                    .contact-info { background: #e8f4fd; padding: 15px; border-radius: 8px; margin: 20px 0; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <div class="success-icon">üéâ</div>
                        <h1>Ch√∫c m·ª´ng b·∫°n!</h1>
                        <p>B·∫°n ƒë√£ m·ªü kh√≥a th√†nh c√¥ng g√≥i h·ªçc VSLearn</p>
                    </div>
                    
                    <div class="content">
                        <h2>Xin ch√†o %s,</h2>
                        
                        <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† ch·ªçn VSLearn! Giao d·ªãch thanh to√°n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng.</p>
                        
                        <div class="package-info">
                            <h3>üì¶ Th√¥ng tin g√≥i h·ªçc:</h3>
                            <ul>
                                <li><strong>T√™n g√≥i:</strong> %s</li>
                                <li><strong>Th·ªùi h·∫°n:</strong> %s</li>
                                <li><strong>S·ªë ti·ªÅn:</strong> %,.0f VND</li>
                                <li><strong>M√£ giao d·ªãch:</strong> %s</li>
                                <li><strong>Ng√†y thanh to√°n:</strong> %s</li>
                                <li><strong>Hi·ªáu l·ª±c t·ª´:</strong> %s ƒë·∫øn %s</li>
                            </ul>
                        </div>
                        
                        <div class="package-info">
                            <h3>üöÄ T√≠nh nƒÉng g√≥i h·ªçc:</h3>
                            <ul class="feature-list">
                                <li>Truy c·∫≠p kh√¥ng gi·ªõi h·∫°n</li>
                                <li>T·∫•t c·∫£ kh√≥a h·ªçc cao c·∫•p</li>
                                <li>Ki·ªÉm tra ti·∫øn ƒë·ªô</li>
                                <li>Ch·ª©ng ch·ªâ ho√†n th√†nh</li>
                                <li>H·ªó tr·ª£ ∆∞u ti√™n</li>
                            </ul>
                        </div>
                        
                        <div style="text-align: center;">
                            <a href="http://localhost:3000/homepage" class="cta-button">B·∫Øt ƒë·∫ßu h·ªçc ngay!</a>
                        </div>
                        
                        <div class="contact-info">
                            <h3>üìû C·∫ßn h·ªó tr·ª£?</h3>
                            <p>ƒê·ªôi ng≈© VSLearn lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n:</p>
                            <ul>
                                <li>üìß Email: vslearn@gmail.com</li>
                                <li>üìû Hotline: 1900 xxxx</li>
                                <li>üåê Website: https://vslearn.com</li>
                            </ul>
                        </div>
                        
                        <p>Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám h·ªçc t·∫≠p tuy·ªát v·ªùi v·ªõi VSLearn!</p>
                        
                        <p>Tr√¢n tr·ªçng,<br>
                        <strong>ƒê·ªôi ng≈© VSLearn</strong></p>
                    </div>
                    
                    <div class="footer">
                        <p>¬© 2024 VSLearn. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
                        <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
                    </div>
                </div>
            </body>
            </html>
            """,
                transaction.getCreatedBy().getFullName(),
                transaction.getPricing().getPricingType(),
                transaction.getPricing().getDurationDays() + " ng√†y",
                transaction.getAmount(),
                transaction.getCode(),
                java.time.LocalDateTime.now().toString(),
                transaction.getStartDate().toString(),
                transaction.getEndDate().toString()
            );
    }

    /**
     * Generate test payment confirmation email content
     */
    private String generateTestPaymentConfirmationEmail() {
        return """
            <!DOCTYPE html>
            <html lang="vi">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Test Email - VSLearn</title>
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .header { background: linear-gradient(135deg, #667eea 0%%, #764ba2 100%%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
                    .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
                    .success-icon { font-size: 48px; margin-bottom: 20px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <div class="success-icon">üéâ</div>
                        <h1>Test Email</h1>
                        <p>Email service ƒëang ho·∫°t ƒë·ªông t·ªët!</p>
                    </div>
                    
                    <div class="content">
                        <h2>Xin ch√†o Test User,</h2>
                        
                        <p>ƒê√¢y l√† email test ƒë·ªÉ ki·ªÉm tra email service c·ªßa VSLearn.</p>
                        
                        <p>Email service ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng!</p>
                        
                        <p>Tr√¢n tr·ªçng,<br>
                        <strong>ƒê·ªôi ng≈© VSLearn</strong></p>
                    </div>
                </div>
            </body>
            </html>
            """;
    }
} 