package com.vslearn.controller;

import com.vslearn.dto.request.TopicCreateRequest;
import com.vslearn.dto.request.TopicUpdateRequest;
import com.vslearn.dto.request.RequestUpdateRequest;
import com.vslearn.dto.response.ReviewHistoryEntry;
import com.vslearn.dto.response.TopicDetailResponse;
import com.vslearn.dto.response.TopicListResponse;
import com.vslearn.dto.response.ResponseData;
import com.vslearn.service.TopicService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/v1/topics")
@CrossOrigin(origins = "http://localhost:3000", allowCredentials = "true")
public class TopicController {
    private final TopicService topicService;

    @Autowired
    public TopicController(TopicService topicService) {
        this.topicService = topicService;
    }

    @GetMapping("/list")
    public ResponseEntity<TopicListResponse> getTopicList(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) String search,
            @RequestParam(required = false) String status,
            @RequestParam(required = false) Long createdBy // th√™m d√≤ng n√†y
    ) {
        return ResponseEntity.ok(topicService.getTopicList(PageRequest.of(page, size), search, status, createdBy));
    }

    @GetMapping("/{topicId}")
    public ResponseEntity<TopicDetailResponse> getTopicDetail(@PathVariable Long topicId) {
        try {
            return ResponseEntity.ok(topicService.getTopicDetail(topicId));
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_CREATOR', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/create")
    public ResponseEntity<Map<String, Object>> createTopic(@RequestBody TopicCreateRequest request) {
        try {
            TopicDetailResponse response = topicService.createTopic(request);
            return ResponseEntity.ok(Map.of("success", true, "message", "T·∫°o ch·ªß ƒë·ªÅ th√†nh c√¥ng", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_CREATOR', 'ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PutMapping("/{topicId}")
    public ResponseEntity<Map<String, Object>> updateTopic(@PathVariable Long topicId, @RequestBody TopicUpdateRequest request) {
        try {
            TopicDetailResponse response = topicService.updateTopic(topicId, request);
            return ResponseEntity.ok(Map.of("success", true, "message", "C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ th√†nh c√¥ng", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_CREATOR', 'ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @DeleteMapping("/{topicId}")
    public ResponseEntity<Map<String, Object>> disableTopic(@PathVariable Long topicId) {
        try {
            topicService.disableTopic(topicId);
            return ResponseEntity.ok(Map.of("success", true, "message", "X√≥a m·ªÅm ch·ªß ƒë·ªÅ th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @GetMapping("/all")
    public ResponseEntity<List<TopicDetailResponse>> getAllTopics() {
        return ResponseEntity.ok(topicService.getAllTopics());
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PutMapping("/{topicId}/status")
    public ResponseEntity<Map<String, Object>> updateTopicStatus(@PathVariable Long topicId, @RequestBody Map<String, String> request) {
        System.out.println("üîç Controller updateTopicStatus - topicId: " + topicId + ", request: " + request);
        
        String status = request.get("status");
        if (status == null || status.trim().isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", "Tr·∫°ng th√°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"));
        }
        
        System.out.println("üîç Controller - status to update: " + status);
        
        try {
            TopicDetailResponse response = topicService.updateTopicStatus(topicId, status);
            System.out.println("üîç Controller - response status: " + response.getStatus());
            return ResponseEntity.ok(Map.of("success", true, "message", "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng", "data", response));
        } catch (Exception e) {
            System.out.println("üîç Controller - error: " + e.getMessage());
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PutMapping("/reorder")
    public ResponseEntity<Map<String, Object>> reorderTopics(@RequestBody Map<String, List<Map<String, Object>>> request) {
        List<Map<String, Object>> items = request.get("items");
        if (items == null || items.isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", "Danh s√°ch tr·ªëng"));
        }
        try {
            topicService.reorderTopics(items);
            return ResponseEntity.ok(Map.of("success", true, "message", "C·∫≠p nh·∫≠t th·ª© t·ª± th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAuthority('ROLE_GENERAL_MANAGER')")
    @GetMapping("/status-options")
    public ResponseEntity<List<Map<String, Object>>> getStatusOptions() {
        List<Map<String, Object>> statusOptions = List.of(
            Map.of("value", "active", "label", "Ho·∫°t ƒë·ªông", "description", "Ch·ªß ƒë·ªÅ ƒëang ho·∫°t ƒë·ªông v√† c√≥ th·ªÉ s·ª≠ d·ª•ng"),
            Map.of("value", "pending", "label", "ƒêang ki·ªÉm duy·ªát", "description", "Ch·ªß ƒë·ªÅ ƒëang ch·ªù ph√™ duy·ªát"),
            Map.of("value", "rejected", "label", "B·ªã t·ª´ ch·ªëi", "description", "Ch·ªß ƒë·ªÅ ƒë√£ b·ªã t·ª´ ch·ªëi"),
            Map.of("value", "inactive", "label", "Kh√¥ng ho·∫°t ƒë·ªông", "description", "Ch·ªß ƒë·ªÅ ƒë√£ b·ªã v√¥ hi·ªáu h√≥a")
        );
        return ResponseEntity.ok(statusOptions);
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/{topicId}/request-update")
    public ResponseEntity<Map<String, Object>> requestUpdate(@PathVariable Long topicId, @RequestBody(required = false) RequestUpdateRequest body) {
        try {
            TopicDetailResponse response = topicService.requestUpdate(topicId,
                    body != null ? body.getAssigneeUserId() : null,
                    body != null ? body.getMessage() : null);
            return ResponseEntity.ok(Map.of("success", true, "message", "Y√™u c·∫ßu ch·ªânh s·ª≠a ƒë√£ ƒë∆∞·ª£c t·∫°o", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_CREATOR', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/{topicId}/save-draft")
    public ResponseEntity<Map<String, Object>> saveDraft(@PathVariable Long topicId, @RequestBody TopicUpdateRequest request) {
        try {
            TopicDetailResponse response = topicService.saveDraft(topicId, request);
            return ResponseEntity.ok(Map.of("success", true, "message", "L∆∞u nh√°p b·∫£n c·∫≠p nh·∫≠t th√†nh c√¥ng", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_CREATOR', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/{topicId}/submit-update")
    public ResponseEntity<Map<String, Object>> submitUpdate(@PathVariable Long topicId) {
        try {
            TopicDetailResponse response = topicService.submitUpdate(topicId);
            return ResponseEntity.ok(Map.of("success", true, "message", "G·ª≠i duy·ªát c·∫≠p nh·∫≠t th√†nh c√¥ng", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/{topicId}/approve-update")
    public ResponseEntity<Map<String, Object>> approveUpdate(@PathVariable Long topicId) {
        try {
            TopicDetailResponse response = topicService.approveUpdate(topicId);
            return ResponseEntity.ok(Map.of("success", true, "message", "Ph√™ duy·ªát c·∫≠p nh·∫≠t th√†nh c√¥ng", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/{topicId}/reject-update")
    public ResponseEntity<Map<String, Object>> rejectUpdate(@PathVariable Long topicId) {
        try {
            TopicDetailResponse response = topicService.rejectUpdate(topicId);
            return ResponseEntity.ok(Map.of("success", true, "message", "T·ª´ ch·ªëi c·∫≠p nh·∫≠t, chuy·ªÉn v·ªÅ nh√°p", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_CREATOR', 'ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/{topicId}/assign-permission")
    public ResponseEntity<Map<String, Object>> assignTopicPermission(@PathVariable Long topicId, @RequestBody Map<String, Object> request) {
        try {
            Long assigneeUserId = Long.valueOf(request.get("assigneeUserId").toString());
            TopicDetailResponse response = topicService.assignTopicPermission(topicId, assigneeUserId);
            return ResponseEntity.ok(Map.of("success", true, "message", "·ª¶y quy·ªÅn th√†nh c√¥ng", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_CREATOR', 'ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/{topicId}/revoke-permission")
    public ResponseEntity<Map<String, Object>> revokeTopicPermission(@PathVariable Long topicId) {
        try {
            TopicDetailResponse response = topicService.revokeTopicPermission(topicId);
            return ResponseEntity.ok(Map.of("success", true, "message", "Thu h·ªìi ·ªßy quy·ªÅn th√†nh c√¥ng", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_CREATOR', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/create-draft")
    public ResponseEntity<Map<String, Object>> createDraftTopic(@RequestBody TopicCreateRequest request) {
        try {
            TopicDetailResponse response = topicService.createDraftTopic(request);
            return ResponseEntity.ok(Map.of("success", true, "message", "T·∫°o nh√°p ch·ªß ƒë·ªÅ th√†nh c√¥ng", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    // New: Curriculum change workflow endpoints
    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @GetMapping("/curriculum-requests")
    public ResponseEntity<Map<String, Object>> getCurriculumRequests() {
        try {
            List<TopicDetailResponse> requests = topicService.getCurriculumRequests();
            return ResponseEntity.ok(Map.of("success", true, "data", requests));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/curriculum-requests/{childTopicId}/approve")
    public ResponseEntity<Map<String, Object>> approveCurriculumRequest(@PathVariable Long childTopicId) {
        try {
            TopicDetailResponse response = topicService.approveCurriculumRequest(childTopicId);
            return ResponseEntity.ok(Map.of("success", true, "message", "Ph√™ duy·ªát thay ƒë·ªïi l·ªô tr√¨nh h·ªçc th√†nh c√¥ng", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/curriculum-requests/{childTopicId}/reject")
    public ResponseEntity<Map<String, Object>> rejectCurriculumRequest(@PathVariable Long childTopicId, @RequestBody Map<String, String> request) {
        try {
            String reason = request.get("reason");
            TopicDetailResponse response = topicService.rejectCurriculumRequest(childTopicId, reason);
            return ResponseEntity.ok(Map.of("success", true, "message", "T·ª´ ch·ªëi thay ƒë·ªïi l·ªô tr√¨nh h·ªçc th√†nh c√¥ng", "data", response));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    // New: Review history endpoint
    @GetMapping("/{topicId}/review-history")
    public ResponseEntity<List<ReviewHistoryEntry>> getTopicReviewHistory(@PathVariable Long topicId) {
        try {
            List<ReviewHistoryEntry> history = topicService.getTopicReviewHistory(topicId);
            return ResponseEntity.ok(history);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }

    // ==================== CURRICULUM PREVIEW WORKFLOW ENDPOINTS ====================

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_CREATOR', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/curriculum-preview")
    public ResponseEntity<Map<String, Object>> createCurriculumPreview(@RequestBody List<Map<String, Object>> items) {
        try {
            topicService.createCurriculumPreview(items);
            return ResponseEntity.ok(Map.of("success", true, "message", "T·∫°o preview thay ƒë·ªïi l·ªô tr√¨nh h·ªçc th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @GetMapping("/curriculum-previews")
    public ResponseEntity<Map<String, Object>> getCurriculumPreviews() {
        try {
            List<TopicDetailResponse> previews = topicService.getCurriculumPreviews();
            return ResponseEntity.ok(Map.of("success", true, "data", previews));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/curriculum-preview/approve")
    public ResponseEntity<Map<String, Object>> approveCurriculumPreview() {
        try {
            topicService.approveCurriculumPreview();
            return ResponseEntity.ok(Map.of("success", true, "message", "Ph√™ duy·ªát thay ƒë·ªïi l·ªô tr√¨nh h·ªçc th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }

    @PreAuthorize("hasAnyAuthority('ROLE_CONTENT_APPROVER', 'ROLE_GENERAL_MANAGER')")
    @PostMapping("/curriculum-preview/reject")
    public ResponseEntity<Map<String, Object>> rejectCurriculumPreview(@RequestBody Map<String, String> request) {
        try {
            String reason = request.get("reason");
            topicService.rejectCurriculumPreview(reason);
            return ResponseEntity.ok(Map.of("success", true, "message", "T·ª´ ch·ªëi thay ƒë·ªïi l·ªô tr√¨nh h·ªçc th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", e.getMessage()));
        }
    }
} 